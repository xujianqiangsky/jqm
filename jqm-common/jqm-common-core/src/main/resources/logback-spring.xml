<?xml version="1.0" encoding="UTF-8" ?>

<!--
  Copyright 2024 the original author or authors.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  -->

<!DOCTYPE configuration>

<configuration>
    <import class="ch.qos.logback.classic.encoder.PatternLayoutEncoder"/>
    <import class="ch.qos.logback.core.ConsoleAppender"/>
    <import class="ch.qos.logback.core.rolling.RollingFileAppender"/>
    <import class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"/>
    <import class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"/>
    <import class="ch.qos.logback.classic.filter.LevelFilter"/>
    <import class="ch.qos.logback.classic.filter.ThresholdFilter"/>
    <import class="org.springframework.boot.logging.logback.ApplicationNameConverter"/>
    <import class="org.springframework.boot.logging.logback.ColorConverter"/>
    <import class="org.springframework.boot.logging.logback.CorrelationIdConverter"/>
    <import class="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
    <import class="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>

    <!-- 创建自定义 conversion 说明符 -->
    <conversionRule conversionWord="applicationName" class="ApplicationNameConverter"/>
    <conversionRule conversionWord="clr" class="ColorConverter"/>
    <conversionRule conversionWord="correlationId" class="CorrelationIdConverter"/>
    <conversionRule conversionWord="wex" class="WhitespaceThrowableProxyConverter"/>
    <conversionRule conversionWord="wEx" class="ExtendedWhitespaceThrowableProxyConverter"/>

    <!--
    <springProperty> 标签可以公开 Spring Environment 中的属性，以便在 Logback 中使用。
    source 必须以 kebab 大小写指定（如 my.property-name）。
    -->
    <springProperty name="APPLICATION_NAME" source="spring.application.name" defaultValue="spring"/>

    <!-- 早期使用的是 property, 同 variable 可以互换使用。 -->
    <!--
    为了帮助定制，一些属性从 Spring Environment 转移到了 System 属性。
    这样，这些属性就能被日志系统配置使用。
    例如，在 application.properties 中设置 logging.file.name 或将 LOGGING_FILE_NAME 设置为环境变量，都会导致 LOG_FILE 系统属性被设置。
    https://docs.spring.io/spring-boot/reference/features/logging.html#features.logging.custom-log-configuration
    -->
    <variable name="CONSOLE_LOG_PATTERN"
              value="${CONSOLE_LOG_PATTERN:-%clr(%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd'T'HH:mm:ss.SSSXXX}}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr(%applicationName[%15.15t]){faint} %clr(${LOG_CORRELATION_PATTERN:-}){faint}%clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>
    <variable name="CONSOLE_LOG_CHARSET" value="${CONSOLE_LOG_CHARSET:-${file.encoding:-UTF-8}}"/>
    <variable name="CONSOLE_LOG_THRESHOLD" value="${CONSOLE_LOG_THRESHOLD:-TRACE}"/>
    <variable name="LOG_FILE"
              value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/${APPLICATION_NAME}.log}"/>
    <variable name="FILE_LOG_PATTERN"
              value="${FILE_LOG_PATTERN:-%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd'T'HH:mm:ss.SSSXXX}} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- %applicationName[%t] ${LOG_CORRELATION_PATTERN:-}%-40.40logger{39} : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>
    <variable name="FILE_LOG_CHARSET" value="${FILE_LOG_CHARSET:-${file.encoding:-UTF-8}}"/>
    <variable name="FILE_LOG_THRESHOLD" value="${FILE_LOG_THRESHOLD:-TRACE}"/>

    <!--
    顾名思义，ConsoleAppender 在控制台上进行追加，更准确地说，是在 System.out 或 System.err 上进行追加，System.out 是默认目标。
    ConsoleAppender 借助用户指定的 encoder 对事件进行格式化。
    System.out 和 System.err 都属于 java.io.PrintStream 类型。
    因此，它们被封装在一个 OutputStreamWriter 中，OutputStreamWriter 负责缓冲 I/O 操作。
    -->
    <appender name="STDOUT" class="ConsoleAppender">
        <!--
        ThresholdFilter 可过滤低于指定阈值的事件。对于级别等于或高于阈值的事件，当调用其 decide() 方法时，ThresholdFilter 将响应 NEUTRAL。
        但是，级别低于阈值的事件将被拒绝。
        -->
        <filter class="ThresholdFilter">
            <level>${CONSOLE_LOG_THRESHOLD}</level>
        </filter>
        <encoder class="PatternLayoutEncoder">
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>${CONSOLE_LOG_CHARSET}</charset>
        </encoder>
    </appender>

    <!--
    FileAppender 是 OutputStreamAppender 的子类，用于将日志事件追加到文件中。
    目标文件由 file 选项指定。
    如果文件已经存在，则会根据 append 属性的值追加或截断文件。
    append: true:
                事件会被附加到现有文件的末尾。
            false:
                任何现有文件都会被截断。
    append 选项默认设置为 true。
    RollingFileAppender 扩展了 FileAppender，使其具有轮换日志文件的功能。
    例如，RollingFileAppender 可以将日志记录到名为 log.txt 的文件中，一旦满足特定条件，就会将日志记录目标更改为另一个文件。
    -->
    <appender name="FILE" class="RollingFileAppender">
        <filter class="ThresholdFilter">
            <level>${FILE_LOG_THRESHOLD}</level>
        </filter>
        <file>${LOG_FILE}</file>
        <!-- RollingPolicy 负责文件移动和重命名的轮换过程。 -->
        <rollingPolicy class="TimeBasedRollingPolicy">
            <fileNamePattern>${LOGBACK_ROLLINGPOLICY_FILE_NAME_PATTERN:-${LOG_FILE}.%d{yyyy-MM-dd}.gz}</fileNamePattern>
            <!-- 如果设置为 true，将在启动 appender 时执行存档移除操作。默认情况下，此属性设置为 false。-->
            <cleanHistoryOnStart>${LOGBACK_ROLLINGPOLICY_CLEAN_HISTORY_ON_START:-false}</cleanHistoryOnStart>
            <!-- maxHistory 属性可控制存档文件的最大数量，并异步删除较旧的文件。。 -->
            <maxHistory>${LOGBACK_ROLLINGPOLICY_MAX_HISTORY:-15}</maxHistory>
            <!--
            totalSizeCap 属性可控制所有存档文件的总大小。当超过总大小上限时，最旧的存档会被异步删除。
            totalSizeCap 属性要求同时设置 maxHistory 属性。
            此外，maxHistory 限制总是首先应用，而 totalSizeCap 限制则在其后应用。
            totalSizeCap 属性以字节、千字节、兆字节或千兆字节为单位指定。
            方法是在数值后分别加上 KB、MB 和 GB。例如，5000000、5000KB、5MB 和 2GB 都是有效值，其中前三个等价。
            没有后缀的数值以字节为单位。
            -->
            <totalSizeCap>${LOGBACK_ROLLINGPOLICY_TOTAL_SIZE_CAP:-50GB}</totalSizeCap>
        </rollingPolicy>
        <encoder class="PatternLayoutEncoder">
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>${FILE_LOG_CHARSET}</charset>
        </encoder>
    </appender>


    <!-- <springProfile> 标签可以根据激活的 Spring profile 文件选择性地包含或排除日志配置。 -->
    <springProfile name="dev">
        <root level="INFO">
            <appender-ref ref="STDOUT"/>
            <appender-ref ref="FILE"/>
        </root>
    </springProfile>

    <springProfile name="prod">
        <root level="INFO">
            <appender-ref ref="STDOUT"/>
            <appender-ref ref="FILE"/>
        </root>
    </springProfile>
</configuration>
